# Author: @brandontjd

app: mateo-backend

service: mateo-backend-loan-pool

provider:
  name: aws
  stage: dev
  timeout: 10
  runtime: python3.7
  region: ap-southeast-1
  memorySize: 2048
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221
  environment:
    PYTHON_ENV: ${self:custom.stage}
    COGNITO_CLIENT_ID: ${self:custom.cognitoClientId}
    COGNITO_USERPOOL_ID: ${self:custom.cognitoUserpoolId}
    TRANSACTION_HISTORY_DATABASE_NAME: ${self:custom.loanPoolDatabaseName}
    POOL_DATABASE_NAME: ${self:custom.poolDatabaseName}
    LOAN_DATABASE_NAME: ${self:custom.loanDatabaseName}
    USER_TRANSACTION_DATABASE_NAME: ${self:custom.userTransactionDatabaseName}
    BANK_DETAIL_LAMBDA: ${self:custom.bankDetailLambda}
    BANK_TRANSFER_LAMBDA: ${self:custom.bankTransferLambda}
    CREDIT_METRIC_LAMBDA: ${self:custom.creditMetricLambda}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: '*'
          Resource: '*'

functions:
  GetPool:
    handler: display-pools/get_pool.main
    events:
      - http:
          path: /loanpool/pool
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin
  
  GetPools:
    handler: display-pools/get_pools.main
    events:
      - http:
          path: /loanpool/pools
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  Deposit:
    handler: pool-interactions/deposit.main
    events:
      - http:
          path: /loanpool/deposit
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  Loan:
    handler: pool-interactions/loan.main
    events:
      - http:
          path: /loanpool/loan
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin
  
  Redeem:
    handler: pool-interactions/redeem.main
    events:
      - http:
          path: /loanpool/redeem
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  Repay:
    handler: pool-interactions/repay.main
    timeout: 900
    events:
      - http:
          path: /loanpool/repay
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  UserHistory:
    handler: user-data/user_history.main
    events:
      - http:
          path: /loanpool/user_history
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  UserProfile:
    handler: user-data/user_profile.main
    events:
      - http:
          path: /loanpool/user_profile
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  LoaningToggle:
    handler: pool-interactions/loan_toggle.main
    events:
      - http:
          path: /loanpool/toggle_loan
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  ComputeCreditMetrics:
    handler: credit-management/compute_credit_metrics.main

  InitPools:
    handler: setup/create_pools.main

  CreateUserLoanProfile:
    handler: setup/create_user_profile_in_loan.main

  UpdateInterestRewards:
    handler: tasks/update_interest_rewards.main
    events: 
      - schedule: 
          rate: cron(0 * ? * * *)
          enabled: true
  
custom:
  stage: ${opt:stage, self:provider.stage}

  # Required for authorizing accessTokens from Cognito
  cognitoArn: ${ssm:/${self:custom.stage}/cognito/arn}
  cognitoClientId: ${ssm:/${self:custom.stage}/cognito/clientId}

  # Required for retrieving user details from Cognito
  cognitoUserpoolId: ${ssm:/${self:custom.stage}/cognito/poolId}

  loanDatabaseName: ${ssm:/${self:custom.stage}/dynamodb/loan/name}
  loanDatabaseArn: ${ssm:/${self:custom.stage}/dynamodb/loan/arn}

  loanPoolDatabaseName: ${ssm:/${self:custom.stage}/dynamodb/loan_pool_transaction/name}
  loanPoolDatabaseArn: ${ssm:/${self:custom.stage}/dynamodb/loan_pool_transaction/arn}

  poolDatabaseName: ${ssm:/${self:custom.stage}/dynamodb/pool/name}
  poolDatabaseArn: ${ssm:/${self:custom.stage}/dynamodb/pool/arn}

  userTransactionDatabaseName: ${ssm:/${self:custom.stage}/dynamodb/user_transaction/name}
  userTransactionDatabaseArn: ${ssm:/${self:custom.stage}/dynamodb/user_transaction/arn}

  bankDetailLambda: 'mateo-backend-user-${self:custom.stage}-GetUserDetails'
  bankTransferLambda: 'mateo-backend-user-${self:custom.stage}-BankTransfer'
  creditMetricLambda: 'mateo-backend-loan-pool-${self:custom.stage}-ComputeCreditMetrics'

  # Compile non-pure python modules on non-linux OSs via Docker
  pythonRequirements:
    dockerizePip: true

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin

package:
  patterns:
    - '!node_modules/**'
